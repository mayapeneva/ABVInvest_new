@using Syncfusion.Blazor.Grids
@typeparam TModel

<div class="table-container">
    <h2 class="bg-abvmiddlegreen"> @Title @Date?.ToString(ShortConstants.Common.DateTimeParseFormat)</h2>
    <hr />

    <SfGrid ID="Grid"
            DataSource="@Models"
            @ref="DefaultGrid"
            Toolbar="@ToolbarItems"
            AllowPdfExport="true"
            AllowResizing="true"
            AllowTextWrap="true"
            AllowPaging="true"
            Height="500">
        <GridPageSettings PageSize="12"></GridPageSettings>
        <GridEvents QueryCellInfo="QueryCellInfoHandler" OnToolbarClick="ToolbarClickHandler" TValue="TModel"></GridEvents>
        <Syncfusion.Blazor.Grids.GridColumns>
            @foreach (var column in Columns)
            {
                <Syncfusion.Blazor.Grids.GridColumn Field="@column.Field" HeaderText="@column.HeaderText" MinWidth="8" Width="@column.Width"></Syncfusion.Blazor.Grids.GridColumn>
            }
        </Syncfusion.Blazor.Grids.GridColumns>
    </SfGrid>
</div>

@code {
    [Parameter]
    public IEnumerable<TModel> Models { get; set; } = [];

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string FileName { get; set; } = string.Empty;

    [Parameter]
    public List<GridColumn> Columns { get; set; } = new List<GridColumn>();

    [Parameter]
    public List<GridColumn> PdfColumns { get; set; } = new List<GridColumn>();

    [Parameter]
    public DateOnly? Date { get; set; }

    private List<string> ToolbarItems = new List<string>() { "PdfExport" };
    private SfGrid<TModel>? DefaultGrid;

    private string CyrilicFontFamily = string.Empty;

    public List<PdfHeaderFooterContent> HeaderContent = new List<PdfHeaderFooterContent>
    {
        new PdfHeaderFooterContent()
        {
            Type = ContentType.Image,
            Src = ShortConstants.Logo.LogoString,
            Position = new PdfPosition() { X = 450, Y = 10 },
            Size = new PdfSize() { Height = 41, Width = 101 }
        }
    };

    public List<PdfHeaderFooterContent> FooterContent = new List<PdfHeaderFooterContent>
    {
        new PdfHeaderFooterContent()
        {
            Type = ContentType.PageNumber,
            PageNumberType = PdfPageNumberType.Arabic,
            Position = new PdfPosition() { X = 500, Y = 10 },
            Style = new PdfContentStyle() { TextBrushColor = "#89BF32", FontSize = 12, HAlign = PdfHorizontalAlign.Center }
        }
    };

    protected override async Task OnInitializedAsync()
    {
        var filePath = Path.GetDirectoryName(AppDomain.CurrentDomain.BaseDirectory);
        using var recordStreamReader = new StreamReader($"{filePath}/wwwroot/fonts/regular_base64.txt");
        CyrilicFontFamily = await recordStreamReader.ReadToEndAsync();
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_pdfexport" && DefaultGrid is not null)
        {
            PdfExportProperties exportProperties = new PdfExportProperties();
            exportProperties.FileName = $"{FileName}_{Date?.ToString(ShortConstants.Common.DateTimeParseFormat)}.pdf";

            exportProperties.IsRepeatHeader = true;
            exportProperties.PageSize = PdfPageSize.A4;
            exportProperties.PageOrientation = PageOrientation.Landscape;

            exportProperties.DisableAutoFitWidth = true;
            exportProperties.Columns = PdfColumns;

            var theme = new PdfTheme();
            var border = new PdfBorder();
            border.Color = "#89BF32";

            var headerThemeStyle = new PdfThemeStyle()
                {
                    Font = new PdfGridFont { IsTrueType = true, FontSize = 10, FontFamily = CyrilicFontFamily },
                    FontColor = "#2A833F",
                    Bold = true,
                    Border = border
                };
            theme.Header = headerThemeStyle;

            var recordThemeStyle = new PdfThemeStyle()
                {
                    Font = new PdfGridFont { IsTrueType = true, FontSize = 10, FontFamily = CyrilicFontFamily },
                    FontColor = "#2A833F",
                    Border = border
                };
            theme.Record = recordThemeStyle;
            exportProperties.Theme = theme;

            var header = new PdfHeader()
                {
                    FromTop = 0,
                    Height = 70,
                    Contents = HeaderContent
                };
            exportProperties.Header = header;

            exportProperties.Footer = new PdfFooter()
                {
                    FromBottom = 0,
                    Height = 50,
                    Contents = FooterContent
                };

            await this.DefaultGrid.ExportToPdfAsync(false, exportProperties);
        }
    }

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<TModel> args)
    {
        if (args.Data is PortfolioViewModel)
        {
            var model = args.Data as PortfolioViewModel;
            if (model != null)
            {
                if (model.Profit < 0)
                {
                    args.Cell.AddClass(new string[] { "negative-profit" });
                }
                else if (model.Profit == 0M)
                {
                    args.Cell.AddClass(new string[] { "no-profit" });
                }
            }
        }
    }
}