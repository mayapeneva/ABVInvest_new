@page "/UserArea/Portfolio"

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPortfoliosService PortfoliosService

<section>
    @if (!PortfolioModels.Any())
    {
        <div class="container">
            <h2 class="bg-abvmiddlegreen"> Портфолио </h2>
            <hr />
            <EditForm Model="Input" method="post" OnValidSubmit="ShowPortfolio" FormName="portfolioForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-group">
                    <div class="col-md-5 mb-3">
                        <label class="col-form-label"> За да да получите информация за портфолиото си, моля изберете дата след @ShortConstants.Common.MinDate.ToString(ShortConstants.Common.DateTimeParseFormat) и не по-късна от @ShortConstants.Common.MaxDate.ToString(ShortConstants.Common.DateTimeParseFormat): </label>
                    </div>
                    <div class="col-md-2 mb-3">
                        <DateInput class="form-control" TValue="DateOnly?" @bind-Value="Input.Date" EnableMinMax="true" Min="@ShortConstants.Common.MinDate" Max="@ShortConstants.Common.MaxDate" Placeholder="Изберете дата" />
                        <ValidationMessage For="() => Input.Date" class="text-danger" />
                    </div>
                    <Button Type="ButtonType.Submit" Class="button-top-margin bg-bg-abvlightgreen bg-abvdarkgreen large-fontsize"> Избери </Button>
                </div>
            </EditForm>
        </div>
    }
    else
    {
        <PortfoliosGrid PortfolioModels="@PortfolioModels" Date="@Input.Date"></PortfoliosGrid>
    }

    <div class="status-message">
        <StatusDisplayMessage DisplayMessages="@ErrorMessages" Success="@Success" />
    </div>

    <BackToPage />
</section>

@code {
    private IEnumerable<string>? ErrorMessages;
    private bool Success;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private IEnumerable<PortfolioViewModel> PortfolioModels = new List<PortfolioViewModel>();

    private async Task ShowPortfolio()
    {
        if (Input.Date is not null)
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var portfolio = await PortfoliosService.GetUserDailyPortfolioAsync<PortfolioViewModel>(authenticationState.User, Input.Date.Value);
            if (portfolio != null && portfolio.Count() > 0)
            {
                PortfolioModels = portfolio!;
                ErrorMessages = [];
            }
            else
            {
                Success = false;
                ErrorMessages = [Messages.DealsAndPortfolios.NoPortfolio];
            }
        }
    }

    private sealed class InputModel
    {
        [DataType(DataType.Date)]
        public DateOnly? Date;
    }
}
