@page "/UserArea/Deals"

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDealsService DealsService

<section>
    @if (!DealsModels.Any())
    {
        <DatePicker Title="Сделки" LabelPart="сделките, сключени за ваша сметка" ShowDataCallback="ShowDeals"></DatePicker>
    }
    else
    {
        <div class="deals-table-container">
            <h2 class="bg-abvmiddlegreen"> Списък със сделки на ценни книжа @DealsModels.First().DailyDealsDate </h2>
            <hr />

            <Grid @ref="grid"
                  TItem="DealViewModel"
                  Class="table table-hover table-bordered table-striped text-nowrap deals-table"
                  HeaderRowCssClass="bg-abvmiddlegreen !important"
                  DataProvider="DealsDataProvider"
                  FixedHeader="true"
                  Height="600"
                  Responsive="true"
                  Unit="Unit.Px">

                <GridColumns>
                    <GridColumn TItem="DealViewModel" HeaderText="Тип на сделката" PropertyName="DealType">
                        @context.DealType
                    </GridColumn>
                    <GridColumn TItem="DealViewModel" HeaderText="БФБ Код" PropertyName="SecurityBfbCode">
                        @context.SecurityBfbCode
                    </GridColumn>
                    <GridColumn TItem="DealViewModel" HeaderText="Емитент" PropertyName="SecurityIssuerName">
                        @context.SecurityIssuerName
                    </GridColumn>
                    <GridColumn TItem="DealViewModel" HeaderText="Количество" PropertyName="Quantity">
                        @context.Quantity
                    </GridColumn>
                    <GridColumn TItem="DealViewModel" HeaderText="Цена" PropertyName="Price">
                        @context.Price
                    </GridColumn>
                    <GridColumn TItem="DealViewModel" HeaderText="Купон" PropertyName="Coupon">
                        @context.Coupon
                    </GridColumn>
                    <GridColumn TItem="DealViewModel" HeaderText="Стойност" PropertyName="TotalPrice">
                        @context.TotalPrice
                    </GridColumn>
                    <GridColumn TItem="DealViewModel" HeaderText="Комисионна" PropertyName="Fee">
                        @context.Fee
                    </GridColumn>
                    <GridColumn TItem="DealViewModel" HeaderText="Валута" PropertyName="CurrencyCode">
                        @context.CurrencyCode
                    </GridColumn>
                    <GridColumn TItem="DealViewModel" HeaderText="Сетълмент" PropertyName="Settlement">
                        @context.Settlement
                    </GridColumn>
                    <GridColumn TItem="DealViewModel" HeaderText="Пазар" PropertyName="MarketName">
                        @context.MarketName
                    </GridColumn>
                </GridColumns>
            </Grid>
        </div>
    }

    <div class="container">
        <div class="status-message">
            <StatusDisplayMessage DisplayMessages="@ErrorMessages" Success="@Success" />
        </div>
    </div>

    <BackToPageLink />
</section>

@code {
    private IEnumerable<string>? ErrorMessages;
    private bool Success;

    private DateOnly Date;

    BlazorBootstrap.Grid<DealViewModel> grid = default!;
    private IEnumerable<DealViewModel> DealsModels = new List<DealViewModel>();

    private async Task ShowDeals(DateOnly date)
    {
        if (date != default)
        {
            Date = date;
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var deals = await DealsService.GetUserDailyDealsAsync<DealViewModel>(authenticationState.User, date);
            if (deals != null && deals.Count() > 0)
            {
                DealsModels = deals!;
                ErrorMessages = [];
            }
            else
            {
                Success = false;
                ErrorMessages = [Messages.DealsAndPortfolios.NoDeals];
            }
        }
    }

    private async Task<GridDataProviderResult<DealViewModel>> DealsDataProvider(GridDataProviderRequest<DealViewModel> request)
    {
        return await Task.FromResult(request.ApplyTo(DealsModels));
    }
}

