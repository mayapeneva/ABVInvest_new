<BaseGrid TModel="PortfolioViewModel"
          Models="PortfolioModels"
          Title="Списък с ценни книжа към дата"
          FileName="Securities"
          Columns="PortfolioColumns"
          PdfColumns="PdfColumns"
          Date="Date"
          QueryCellInfoHandler="QueryCellInfoHandler">
</BaseGrid>

@code {
    [Parameter]
    public IEnumerable<PortfolioViewModel> PortfolioModels { get; set; } = [];

    [Parameter]
    public DateOnly Date { get; set; }

    private List<GridColumn> PortfolioColumns = new List<GridColumn>
    {
        new GridColumn { Field = nameof(PortfolioViewModel.SecurityIssuerName), HeaderText = ShortConstants.Common.SecurityIssuer, Width = "200" },
        new GridColumn { Field = nameof(PortfolioViewModel.SecurityBfbCode), HeaderText = ShortConstants.Common.BfbCode, Width = "100" },
        new GridColumn { Field = nameof(PortfolioViewModel.SecurityIsin), HeaderText = ShortConstants.Portfolios.ISIN, Width = "100" },
        new GridColumn { Field = nameof(PortfolioViewModel.Quantity), HeaderText = ShortConstants.Portfolios.Quantity, Width = "100" },
        new GridColumn { Field = nameof(PortfolioViewModel.CurrencyCode), HeaderText = ShortConstants.Common.CurrencyCode, Width = "100" },
        new GridColumn { Field = nameof(PortfolioViewModel.AveragePriceBuy), HeaderText = ShortConstants.Portfolios.AveragePrice, Width = "100" },
        new GridColumn { Field = nameof(PortfolioViewModel.TotalPriceBuy), HeaderText = ShortConstants.Portfolios.TotalPriceBuy, Width = "100" },
        new GridColumn { Field = nameof(PortfolioViewModel.MarketPrice), HeaderText = ShortConstants.Portfolios.MarketPrice, Width = "100" },
        new GridColumn { Field = nameof(PortfolioViewModel.TotalMarketPrice), HeaderText = ShortConstants.Portfolios.MarketValue, Width = "100" },
        new GridColumn { Field = nameof(PortfolioViewModel.ProfitString), HeaderText = ShortConstants.Portfolios.Profit, Width = "100" },
        new GridColumn { Field = nameof(PortfolioViewModel.ProfitPercentage), HeaderText = ShortConstants.Portfolios.ProfitInPersentage, Width = "100" },
        new GridColumn { Field = nameof(PortfolioViewModel.PortfolioShare), HeaderText = ShortConstants.Portfolios.PortfolioShare, Width = "100" }
    };

    private List<GridColumn> PdfColumns = new List<GridColumn>
    {
        new GridColumn(){ Field=nameof(PortfolioViewModel.SecurityIssuerName), HeaderText=ShortConstants.Common.SecurityIssuer, Width="100"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.SecurityBfbCode), HeaderText=ShortConstants.Common.BfbCode, Width="40"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.SecurityIsin), HeaderText=ShortConstants.Portfolios.ISIN, Width="55"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.Quantity), HeaderText=ShortConstants.Portfolios.Quantity, Width="75"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.CurrencyCode), HeaderText=ShortConstants.Common.CurrencyCode, Width="45"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.AveragePriceBuy), HeaderText=ShortConstants.Portfolios.AveragePrice, Width="50"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.TotalPriceBuy), HeaderText=ShortConstants.Portfolios.TotalPriceBuy, Width="80"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.MarketPrice), HeaderText=ShortConstants.Portfolios.MarketPrice, Width="55"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.TotalMarketPrice), HeaderText=ShortConstants.Portfolios.MarketValue, Width="65"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.ProfitString), HeaderText=ShortConstants.Portfolios.Profit, Width="65"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.ProfitPercentage), HeaderText=ShortConstants.Portfolios.ProfitInPersentage, Width="65"},
        new GridColumn(){ Field=nameof(PortfolioViewModel.PortfolioShare), HeaderText=ShortConstants.Portfolios.PortfolioShare, Width="65"}
    };

    public void QueryCellInfoHandler(QueryCellInfoEventArgs<PortfolioViewModel> args)
    {
        if (args.Data.Profit < 0)
        {
            args.Cell.AddClass(new string[] { "negative-profit" });
        }
        else if (args.Data.Profit == 0M)
        {
            args.Cell.AddClass(new string[] { "no-profit" });
        }
    }
}
