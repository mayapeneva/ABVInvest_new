@page "/UserArea/Balance"

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBalancesService BalancesService

<section>
    @if (!BalanceModels.Any())
    {
        <DatePicker Title="Баланс" LabelPart="баланса си" ShowDataCallback="ShowBalance"></DatePicker>
    }
    else
    {
        <div class="table-container">
            <h2 class="bg-abvmiddlegreen"> Баланс към дата @Date.ToString(ShortConstants.Common.DateTimeParseFormat) </h2>
            <hr />

            <SfGrid ID="Grid"
                    DataSource="@BalanceModels"
                    @ref="DefaultGrid"
                    AllowResizing="true"
                    AllowTextWrap="true"
                    AllowPaging="true"
                    Height="500">
                <GridPageSettings PageSize="12"></GridPageSettings>
                <Syncfusion.Blazor.Grids.GridColumns>
                    @foreach (var column in BalanceColumns)
                    {
                        <Syncfusion.Blazor.Grids.GridColumn Field="@column.Field" HeaderText="@column.HeaderText" MinWidth="8" Width="@column.Width"></Syncfusion.Blazor.Grids.GridColumn>
                    }
                </Syncfusion.Blazor.Grids.GridColumns>
            </SfGrid>
        </div>
    }

    <div class="container">
        <div class="status-message">
            <StatusDisplayMessage DisplayMessages="@ErrorMessages" Success="@Success" />
        </div>
    </div>

    <BackToPageLink />
</section>

@code {
    private IEnumerable<string>? ErrorMessages;
    private bool Success;

    private DateOnly Date;

    private IEnumerable<BalanceViewModel> BalanceModels = new List<BalanceViewModel>();

    private SfGrid<BalanceViewModel>? DefaultGrid;

    private List<GridColumn> BalanceColumns = new List<GridColumn>
    {
        new GridColumn { Field = nameof(BalanceViewModel.CurrencyCode), HeaderText = ShortConstants.Common.CurrencyCode, Width = "75" },
        new GridColumn { Field = nameof(BalanceViewModel.Cash), HeaderText = ShortConstants.Balances.Cash, Width = "125" },
        new GridColumn { Field = nameof(BalanceViewModel.AllSecuritiesTotalPriceBuy), HeaderText = ShortConstants.Balances.SecuritiesTotalPriceBuy, Width = "150" },
        new GridColumn { Field = nameof(BalanceViewModel.AllSecuritiesTotalMarketPrice), HeaderText = ShortConstants.Balances.SecuritiesTotalMarketPrice, Width = "150" },
        new GridColumn { Field = nameof(BalanceViewModel.VirtualProfit), HeaderText = ShortConstants.Balances.TotalProfit, Width = "100" },
        new GridColumn { Field = nameof(BalanceViewModel.VirtualProfit), HeaderText = ShortConstants.Balances.TotalProfitInPersentage, Width = "100" }
    };

    private async Task ShowBalance(DateOnly date)
    {
        if (date != default)
        {
            Date = date;
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var balance = await BalancesService.GetUserDailyBalanceAsync<BalanceViewModel>(authenticationState.User, date);
            if (balance is not null)
            {
                BalanceModels = [balance];
                ErrorMessages = [];
            }
            else
            {
                Success = false;
                ErrorMessages = [string.Format(Messages.Common.NoBalance, DateTime.UtcNow.ToString(ShortConstants.Common.DateTimeParseFormat))];
            }
        }
    }
}

