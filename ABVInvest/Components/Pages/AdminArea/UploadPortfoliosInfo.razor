@page "/AdminArea/UploadPortfoliosInfo"

@attribute [Authorize(Roles = ShortConstants.Role.Admin)]

@rendermode InteractiveServer

@inject IDeserialiser UploadsHelper
@inject IPortfoliosService PortfoliosService

<div class="container">
    <h2 class="bg-abvmiddlegreen"> Качване на информация за портфолиа </h2>
    <hr />

    <div class="col-md-4">
        <h4> Тук можете да качите файлът с клиентските портофолиа: </h4>

        <EditForm Model="Input" method="post" OnValidSubmit="AddPortfolios" FormName="addPortfoliosForm" enctype="multipart/form-data">
            <DataAnnotationsValidator />
            <div class="form-group">
                <div class="row p-0 m-0 mb-3">
                    <DateInput class="form-control" TValue="DateOnly?" @bind-Value="Input.Date" EnableMinMax="true" Min="@ShortConstants.Common.MinDate" Max="@ShortConstants.Common.MaxDate" Placeholder="Изберете дата" />
                    <ValidationMessage For="() => Input.Date" class="text-danger" />
                </div>
                <div class="row mb-3 mx-auto">
                    <InputFile class="form-control" placeholder="Клиентски портфолиа" OnChange="@SetFile" multiple />
                    <ValidationMessage For="() => Input.XMLFiles" class="text-danger" />
                </div>
                <Button Type="ButtonType.Submit" Class="add-data-button bg-bg-abvlightgreen bg-abvdarkgreen large-fontsize"> Качи </Button>
            </div>
        </EditForm>
    </div>

    <div class="status-message">
        <StatusDisplayMessage DisplayMessages="@ErrorMessages" Success="@Success" />
    </div>

    <BackToPage />
</div>

@code {
    private IEnumerable<string>? ErrorMessages;
    private bool Success;

    [SupplyParameterFromForm(FormName = "addPortfoliosForm")]
    private FileInputModel Input { get; set; } = new();

    private void SetFile(InputFileChangeEventArgs e)
    {
        Input.XMLFiles = e.GetMultipleFiles();
    }

    private async Task AddPortfolios()
    {
        if (Input.Date is not null && Input.XMLFiles is not null)
        {
            foreach (var file in Input.XMLFiles)
            {
                if (file.ContentType.EndsWith(ShortConstants.Common.XmlFileContentType))
                {
                    var fileName = Path.Combine(Directory.GetCurrentDirectory(), ShortConstants.Common.FileUploadFolder, ShortConstants.Common.UploadedFile);
                    if (file.Size > 0)
                    {
                        var deserializedPortfolios = await UploadsHelper.DeserialiseXmlFile<PortfolioRowBindingModel>(fileName, file);
                        if (deserializedPortfolios.Count() == 0 || !ModelValidator.IsValid(deserializedPortfolios))
                            ErrorMessages = [Messages.Common.CouldNotUploadInformation];
                        else
                        {
                            var result = await this.PortfoliosService.SeedPortfoliosAsync(deserializedPortfolios, Input.Date.Value);
                            if (!result.IsSuccessful())
                            {
                                Success = false;
                                ErrorMessages = result.Errors;
                            }
                            else
                            {
                                Success = true;
                                ErrorMessages = [Messages.DealsAndPortfolios.UploadingSuccessfull];
                            }
                        }
                    }
                }
            }
        }
    }
}
