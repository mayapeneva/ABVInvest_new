@inject IDataService DataService

<div class="col-md-4">
    <h4> Попълнете името и MIC на пазара, който искате да добавите: </h4>

    <EditForm Model="Input" method="post" OnValidSubmit="AddMarketData" FormName="addMarketForm">
        <DataAnnotationsValidator />
        <div class="form-group">
            <div class="row m-0 mb-3">
                <InputText @bind-Value="Input.Name" Placeholder="Пазар" @oninput="ClearDisplayMessage" />
                <ValidationMessage For="() => Input.Name" class="text-danger" />
            </div>
            <div class="row m-0 mb-3">
                <InputText @bind-Value="Input.MIC" Placeholder="Идентификационен код на пазара (MIC)" @oninput="ClearDisplayMessage" />
                <ValidationMessage For="() => Input.MIC" class="text-danger" />
            </div>
            <Button Type="ButtonType.Submit" Class="add-data-button bg-bg-abvlightgreen bg-abvdarkgreen large-fontsize"> Добави </Button>
        </div>
    </EditForm>
</div>

<div class="status-message">
    <StatusDisplayMessage DisplayMessages="@ErrorMessages" Success="@Success" />
</div>

@code {
    private IEnumerable<string>? ErrorMessages;
    private bool Success;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task AddMarketData()
    {
        if (Input.Name is not null && Input.MIC is not null)
        {
            var result = await DataService.CreateMarketAsync(Input.Name, Input.MIC);
            if (!result.IsSuccessful())
            {
                Success = false;
                ErrorMessages = result.Errors;
            }
            else
            {
                Success = true;
                ErrorMessages = [string.Format(Messages.Data.MarketAdded, Input.Name)];
            }
        }
    }

    private async Task ClearDisplayMessage()
    {
        Success = false;
        ErrorMessages = [];
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = Messages.Common.RequiredField)]
        [DataType(DataType.Text)]
        public string Name { get; set; }

        [Required(ErrorMessage = Messages.Common.RequiredField)]
        [RegularExpression("^[A-Z]{4}$", ErrorMessage = Messages.Data.MarketMICError)]
        public string MIC { get; set; }
    }
}
