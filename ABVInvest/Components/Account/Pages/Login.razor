@page "/Account/Login"

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<h2 class="bg-abvmiddlegreen"> Вход за потребители </h2>
<div class="col-md-6">
    <section>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3 login-box">
                <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="username" />
                <label for="username" class="form-label"> Потребител </label>
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
            </div>
            <div class="form-floating mb-3 login-box">
                <InputText @bind-Value="Input.PIN" class="form-control" autocomplete="pin" aria-required="true" placeholder="PIN" />
                <label for="pin" class="form-label"> ПИН </label>
                <ValidationMessage For="() => Input.PIN" class="text-danger" />
            </div>
            <div class="form-floating mb-3 login-box">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label"> Имейл </label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3 login-box">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="password" class="form-label"> Парола </label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="checkbox mb-3 login-checkbox">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input login-checkbox-box" />
                    Запомни ме
                </label>
            </div>
            <div>
                <button type="submit" class="btn bg-bg-abvlightgreen bg-abvdarkgreen w-100"> Вход </button>
            </div>
            <div class="login-links">
                <p>
                    <a href="Account/ForgotPassword" class="bg-abvmiddlegreen"> Забравена парола </a>
                </p>
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="bg-abvmiddlegreen"> Регистрирайте се като нов потребител </a>
                </p>
                <p>
                    <a href="Account/ResendEmailConfirmation" class="bg-abvmiddlegreen"> Препрати имейл потвърждение </a>
                </p>
            </div>
        </EditForm>
    </section>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [RegularExpression(Constants.Identity.UserNameRegex, ErrorMessage = Messages.Identity.UsernameError)]
        public string UserName { get; set; }

        [Required]
        [RegularExpression(Constants.Identity.PINRegex, ErrorMessage = Messages.Identity.PINError)]
        [Display(Name = "PIN")]
        public string PIN { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
